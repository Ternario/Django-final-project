# Generated by Django 5.1.1 on 2024-10-29 22:26

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Apartments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('title', models.CharField(max_length=130, verbose_name='Apartments title')),
                ('description', models.TextField(max_length=250, validators=[django.core.validators.MinLengthValidator(40)], verbose_name='Apartments description')),
                ('city', models.CharField(max_length=100, verbose_name='City name')),
                ('post_code', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator('^[0-9]{6}$', 'Invalid postal code')])),
                ('street', models.CharField(max_length=120, verbose_name='Street name')),
                ('house_number', models.CharField(max_length=30, verbose_name='House number')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('number_of_rooms', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(6), django.core.validators.MinValueValidator(1)], verbose_name='Number of rooms')),
                ('apartment_area', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MaxValueValidator(400), django.core.validators.MinValueValidator(10)], verbose_name='Area of apartment')),
                ('number_of_beds', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(6), django.core.validators.MinValueValidator(1)], verbose_name='Number of beds')),
                ('single_bed', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(6), django.core.validators.MinValueValidator(1)], verbose_name='number of single bed')),
                ('double_bed', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(6), django.core.validators.MinValueValidator(1)], verbose_name='number of double bed')),
                ('parking', models.BooleanField(default=False, verbose_name='is there a parking space')),
                ('pets', models.BooleanField(default=False, verbose_name='Is pets available')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='apartments', to='placement_models.categories')),
            ],
            options={
                'ordering': ['-created_at'],
                'constraints': [models.CheckConstraint(condition=models.Q(('single_bed__isnull', False), ('double_bed__isnull', False), _connector='OR'), name="Both fields can't be zero")],
            },
        ),
    ]
