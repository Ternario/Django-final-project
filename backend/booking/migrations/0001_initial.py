# Generated by Django 5.1.1 on 2025-05-18 16:16

import booking.models.placement_image
import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.manager
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(blank=True, max_length=35, null=True, unique=True, verbose_name='Username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=155, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=155, verbose_name='Last Name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('phone', models.CharField(max_length=21, unique=True, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(21)], verbose_name='Phone number')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is admin')),
                ('is_moderator', models.BooleanField(default=False, verbose_name='Moderator')),
                ('is_landlord', models.BooleanField(default=False, verbose_name='Is landlord')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is verified')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is deleted')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='registered')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(auto_now=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Placement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Apartments title')),
                ('description', models.TextField(validators=[django.core.validators.MinLengthValidator(40), django.core.validators.MaxLengthValidator(2000)], verbose_name='Apartments description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('10.00'))], verbose_name='Price')),
                ('number_of_rooms', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(6), django.core.validators.MinValueValidator(1)], verbose_name='Number of rooms')),
                ('placement_area', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('15.00')), django.core.validators.MaxValueValidator(Decimal('500.00'))])),
                ('total_beds', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(1)], verbose_name='Total beds')),
                ('single_bed', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(15)], verbose_name='Number of single bed')),
                ('double_bed', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(15)], verbose_name='Number of double bed')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Date created')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Date updated')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is deleted')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Apartments', to='booking.category', verbose_name='Category')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Owner', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Placement',
                'verbose_name_plural': 'Placements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_date', models.DateField(verbose_name='Check in date')),
                ('check_out_date', models.DateField(verbose_name='Check out date')),
                ('check_in_time', models.TimeField(blank=True, choices=[(datetime.time(11, 0), '_11AM'), (datetime.time(12, 0), '_12PM'), (datetime.time(13, 0), '_1PM'), (datetime.time(14, 0), '_2PM'), (datetime.time(15, 0), '_3PM'), (datetime.time(16, 0), '_4PM'), (datetime.time(17, 0), '_5PM'), (datetime.time(18, 0), '_6PM'), (datetime.time(19, 0), '_7PM'), (datetime.time(20, 0), '_8PM'), (datetime.time(21, 0), '_9PM'), (datetime.time(22, 0), '_10PM')], default=datetime.time(11, 0), verbose_name='Check in Time')),
                ('check_out_time', models.TimeField(blank=True, choices=[(datetime.time(10, 0), '_10AM'), (datetime.time(9, 0), '_9AM'), (datetime.time(8, 0), '_8AM'), (datetime.time(7, 0), '_7AM'), (datetime.time(6, 0), '_6AM'), (datetime.time(5, 0), '_5AM'), (datetime.time(4, 0), '_4AM'), (datetime.time(3, 0), '_3AM'), (datetime.time(2, 0), '_2AM'), (datetime.time(1, 0), '_1AM'), (datetime.time(0, 0), '_12AM')], default=datetime.time(10, 0), verbose_name='Check out Time')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed')], default='PENDING', max_length=20, verbose_name='Booking Status')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('cancellation_reason', models.TextField(blank=True, null=True, verbose_name='Cancellation reason')),
                ('cancelled_at', models.DateTimeField(blank=True, null=True, verbose_name='Cancellation date')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('cancelled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cancelled_bookings', to=settings.AUTH_USER_MODEL, verbose_name='Cancelled by')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bookings', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('placement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bookings', to='booking.placement', verbose_name='Placement')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PlacementDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pets', models.BooleanField(default=False, verbose_name='Pets friendly')),
                ('free_wifi', models.BooleanField(default=False, verbose_name='Free wifi')),
                ('smoking', models.BooleanField(default=False, verbose_name='Smoking allowed')),
                ('parking', models.BooleanField(default=False, verbose_name='Parking space')),
                ('room_service', models.BooleanField(default=False, verbose_name='Room service')),
                ('front_desk_allowed_24', models.BooleanField(default=False, verbose_name='24-hour front desk')),
                ('free_cancellation', models.BooleanField(default=False, verbose_name='Free cancellation')),
                ('balcony', models.BooleanField(default=False, verbose_name='Balcony')),
                ('air_conditioning', models.BooleanField(default=False, verbose_name='Air conditioning')),
                ('washing_machine', models.BooleanField(default=False, verbose_name='Washing machine')),
                ('kitchenette', models.BooleanField(default=False, verbose_name='Kitchenette')),
                ('tv', models.BooleanField(default=False, verbose_name='Tv')),
                ('coffee_tee_maker', models.BooleanField(default=False, verbose_name='Coffee/Tea maker')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Date created')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Date updated')),
                ('placement', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='placement_details', to='booking.placement', verbose_name='Placement')),
            ],
            options={
                'verbose_name': 'Placement Detail',
                'verbose_name_plural': 'Placement Details',
            },
        ),
        migrations.CreateModel(
            name='PlacementImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=booking.models.placement_image.PlacementImage.upload_to, verbose_name='Placement image')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('placement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='placement_images', to='booking.placement', verbose_name='Placement')),
            ],
            options={
                'verbose_name': 'Placement Image',
                'verbose_name_plural': 'Placement Images',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlacementLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=155, verbose_name='Country name')),
                ('city', models.CharField(max_length=155, verbose_name='City name')),
                ('post_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.RegexValidator('^[0-9]{5}$', 'Invalid postal code.')], verbose_name='Post code')),
                ('street', models.CharField(max_length=155, verbose_name='Street name')),
                ('house_number', models.CharField(max_length=30, verbose_name='House Number')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Date updated')),
                ('placement', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='placement_location', to='booking.placement', verbose_name='Placement')),
            ],
            options={
                'verbose_name': 'Placement Location',
                'verbose_name_plural': 'Placement Locations',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PUBLISHED', 'Published'), ('FLAGGED', 'Flagged'), ('REMOVED', 'Removed')], default='PUBLISHED', max_length=20, verbose_name='Status')),
                ('feedback', models.TextField(max_length=1000, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='Feedback')),
                ('rating', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)], verbose_name='Rating')),
                ('owner_response', models.TextField(blank=True, max_length=1000, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='Owner response')),
                ('moderator_notes', models.TextField(blank=True, max_length=2000, verbose_name='Moderator notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='booking.booking', verbose_name='Booking')),
                ('placement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='booking.placement', verbose_name='Placement')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='placement',
            constraint=models.CheckConstraint(condition=models.Q(('single_bed', 0), ('double_bed', 0), _negated=True), name="Both bed fields can't be zero."),
        ),
        migrations.AddConstraint(
            model_name='placement',
            constraint=models.CheckConstraint(condition=models.Q(('total_beds', django.db.models.expressions.CombinedExpression(models.F('single_bed'), '+', models.F('double_bed')))), name='Both bed fields must be equal to the total beds.'),
        ),
    ]
